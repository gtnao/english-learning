番号,表現,例文（英語）,例文（和訳）,文法ポイント,使用場面,カジュアル版,フォーマル版,よくある間違い,備考
1,"Let's follow the principle of least surprise","Should delete return item or status? - Let's follow the principle of least surprise.","削除は項目かステータスを返すべき？- 最小驚き原則に従いましょう。","定冠詞必要。確立された原則。","API設計、UI/UX決定、インターフェース設計","Let's keep it intuitive","We should adhere to established conventions","principle of least surprise (冠詞欠落)","直感的な設計推奨"
2,"This adheres to SOLID principles","Why split into three classes? - This adheres to SOLID principles.","なぜ3つのクラスに分割？- SOLID原則に準拠しています。","adhere to で準拠。複数形principles。","コードレビュー、設計説明、リファクタリング根拠","This follows SOLID","This implementation conforms to SOLID principles","adheres SOLID principles (to欠落)","設計品質の説明"
3,"Let's document the why, not just the what","Should I explain what function does? - Let's document the why, not just the what.","関数の動作を説明すべき？- 何をではなく、なぜを文書化しましょう。","疑問詞を冠詞で名詞化。対比構造。","コードコメント、設計文書、アーキテクチャ決定","Explain why, not what","Documentation should capture rationale","document why, not what (冠詞欠落)","深い理解促進"
4,"We should establish coding conventions","Everyone's style different. - We should establish coding conventions.","みんなのスタイルが違う。- コーディング規約を確立すべきです。","一般概念で冠詞不要。shouldで推奨。","新プロジェクト、コードレビュー基準、品質向上","Let's agree on a style guide","We need to implement standardized coding practices","the coding conventions (冠詞不要)","標準化の提案"
5,"This is self-documenting code","Need comments for this? - This is self-documenting code.","これにコメント必要？- 自己文書化コードです。","複合形容詞。不可算名詞code。","コードレビュー、リファクタリング成果、ベストプラクティス","The code explains itself","The implementation exhibits self-explanatory characteristics","a self-documenting code (冠詞不要)","高品質コード評価"
6,"Let's maintain a single source of truth","Config in three files. - Let's maintain a single source of truth.","設定が3ファイルに。- 単一の真実の源を維持しましょう。","確立された用語。冠詞a必要。","設定管理、データベース設計、ドキュメント管理","Keep it in one place","We should centralize authoritative data","single source of truth (冠詞欠落)","データ管理原則"
7,"We're following DRY principles here","Why extract to function? - We're following DRY principles here.","なぜ関数に抽出？- DRY原則に従っています。","現在進行形で継続実践。複数形principles。","リファクタリング説明、コードレビュー、設計根拠","We don't repeat code","We adhere to the Don't Repeat Yourself principle","DRY principle (複数形が一般的)","重複回避の説明"
8,"Let's add meaningful commit messages","I write 'fix' or 'update'. - Let's add meaningful commit messages.","'fix'や'update'と書く。- 意味のあるコミットメッセージを追加しましょう。","meaningfulで質強調。通常複数形。","チーム規約、コードレビュー、新人教育","Write better commit messages","We should implement descriptive version control annotations","meaningful commit message (複数形)","履歴管理改善"
9,"This follows the convention over configuration approach","Why no config needed? - This follows the convention over configuration approach.","なぜ設定不要？- 設定より規約のアプローチに従っています。","定冠詞the必要。確立された原則。","フレームワーク選定、設定設計、開発効率化","It uses smart defaults","This implements implicit configuration paradigm","convention over configuration approach (冠詞欠落)","設計哲学の説明"
10,"Let's implement proper error handling","App just crashes. - Let's implement proper error handling.","アプリがクラッシュ。- 適切なエラーハンドリングを実装しましょう。","properで適切さ強調。一般概念で冠詞不要。","コードレビュー、品質改善、UX向上","Let's handle errors better","We should establish comprehensive exception management","the proper error handling (冠詞不要)","品質向上提案"
11,"This violates the separation of concerns","DB queries in UI. - This violates the separation of concerns.","UIにDBクエリ。- 関心の分離に違反しています。","定冠詞the必要。violateで違反表現。","コードレビュー、アーキテクチャ議論、リファクタリング","Don't mix these things","This breaches architectural boundaries","violates separation of concerns (冠詞欠落)","設計問題指摘"
12,"Let's write idempotent operations","What if request sent twice? - Let's write idempotent operations.","リクエスト2回送信したら？- 冪等な操作を書きましょう。","技術用語を形容詞使用。通常複数形。","API設計、分散システム、エラーリトライ","Make it safe to retry","We should ensure operational idempotency","idempotent operation (複数形)","堅牢な設計"
13,"We need to refactor, not rewrite","Code is mess, start over? - We need to refactor, not rewrite.","コードが混乱、最初から？- 書き直しでなくリファクタリングが必要。","to不定詞必要。対比構造。","レガシーコード改善、技術的負債、プロジェクト計画","Let's clean it up gradually","Incremental refactoring is preferable to complete reconstruction","need refactoring (to不定詞欠落)","現実的アプローチ"
14,"Let's enforce this at the API level","Should clients validate? - Let's enforce this at the API level.","クライアントが検証すべき？- APIレベルで強制しましょう。","at the levelで階層指定。enforceで強制。","バリデーション設計、セキュリティ、アーキテクチャ","Put the check in the API","Implementation should occur at the API layer","on the API level (前置詞誤り)","一元的制御"
15,"This is a code smell","500-line method works. - This is a code smell.","500行メソッドは動作。- これはコードの臭いです。","確立された技術用語。冠詞a必要。","コードレビュー、リファクタリング候補、教育的指摘","This doesn't feel right","This exhibits anti-pattern characteristics","This is code smell (冠詞欠落)","潜在的問題指摘"
16,"Let's keep the interface stable","Need to change API format. - Let's keep the interface stable.","API形式変更必要。- インターフェースを安定に保ちましょう。","特定インターフェースで冠詞the。keep+O+C構造。","API設計、ライブラリ開発、バージョニング","Don't break the API","Interface stability must be maintained","keep interface stable (冠詞欠落)","互換性重視"
17,"We're accumulating technical debt here","Just add another if. - We're accumulating technical debt here.","if文をもう一つ追加。- 技術的負債を蓄積しています。","現在進行形で継続蓄積。一般概念で冠詞不要。","設計決定、スプリント計画、リファクタリング提案","This will cause problems later","This approach incurs technical debt","the technical debt (冠詞不要)","将来リスク指摘"
18,"Let's add comprehensive logging","Hard to debug production. - Let's add comprehensive logging.","本番デバッグ困難。- 包括的なロギングを追加しましょう。","comprehensiveで網羅性。loggingは不可算。","本番準備、トラブルシューティング、監視体制","Add more logs","We should implement extensive instrumentation","comprehensive loggings (複数形誤り)","診断性向上"
19,"This needs proper documentation","Integration complex. - This needs proper documentation.","統合が複雑。- 適切な文書化が必要です。","properで質強調。documentationは不可算。","複雑な実装、APIリリース、コードレビュー","We should document this","Comprehensive documentation is required","a proper documentation (冠詞不要)","保守性への懸念"
20,"Let's version this properly","Handle breaking changes? - Let's version this properly.","破壊的変更の扱い？- 適切にバージョン管理しましょう。","versionを動詞使用。properlyは副詞。","ライブラリ開発、API管理、リリース戦略","Let's use version numbers","We should implement systematic versioning","do versioning properly (冗長)","体系的管理"
21,"We should deprecate this gracefully","Old API rarely used. - We should deprecate this gracefully.","古いAPIはまれに使用。- 優雅に非推奨にすべきです。","gracefullyで方法の質。shouldで推奨。","API廃止、レガシー整理、破壊的変更","Let's phase this out slowly","Systematic deprecation process is required","deprecate this graceful (副詞形)","段階的廃止"
22,"Let's optimize for readability","One-liner 10% faster. - Let's optimize for readability.","ワンライナーが10%速い。- 可読性を最適化しましょう。","optimize for で対象指定。forが必要。","コードレビュー、リファクタリング、チーム規約","Make it easy to read","Prioritize code comprehensibility","optimize readability (for欠落)","保守性重視"
23,"This introduces unnecessary complexity","Factory for simple objects. - This introduces unnecessary complexity.","単純オブジェクトにファクトリー。- 不必要な複雑さを導入します。","introduceで持ち込む。抽象概念で冠詞不要。","設計レビュー、オーバーエンジニアリング防止、YAGNI","This is overkill","This adds unwarranted architectural complexity","an unnecessary complexity (冠詞不要)","過剰設計警告"
24,"Let's fail gracefully","What if service down? - Let's fail gracefully.","サービスダウンしたら？- 優雅に失敗しましょう。","gracefullyは副詞。failを修飾。","エラーハンドリング、フォールバック、UX最適化","Handle errors nicely","Implement graceful degradation","fail graceful (副詞形必要)","耐障害性設計"
25,"We need to dogfood our own API","Is API developer-friendly? - We need to dogfood our own API.","APIは開発者に優しい？- 自分たちのAPIをドッグフーディングする必要があります。","dogfoodを動詞使用。業界用語。","API品質、製品改善、開発者体験","Let's use our own stuff","We should consume our own services","do dogfooding (動詞形が自然)","実践的品質保証"
26,"Let's implement progressive enhancement","Not all have latest browsers. - Let's implement progressive enhancement.","最新ブラウザがない人も。- プログレッシブエンハンスメントを実装しましょう。","Web開発の確立手法。一般手法で冠詞不要。","フロントエンド設計、アクセシビリティ、段階的機能","Start simple, add features","We should adopt a progressive enhancement strategy","the progressive enhancement (冠詞不要)","包括的設計"
27,"This follows the open-closed principle","Why inheritance not modify? - This follows the open-closed principle.","なぜ修正でなく継承？- 開放閉鎖原則に従っています。","特定原則で冠詞the。SOLID原則の一つ。","OO設計、コードレビュー、アーキテクチャ説明","Extend, don't modify","This adheres to the open-closed principle","open-closed principle (冠詞欠落)","拡張性の説明"
28,"Let's establish clear boundaries","Modules tightly coupled. - Let's establish clear boundaries.","モジュール密結合。- 明確な境界を確立しましょう。","clearで質強調。複数の境界で複数形。","システム設計、マイクロサービス、レイヤー設計","Let's separate things clearly","We should define explicit module interfaces","clear boundary (複数形)","設計の明確化"
29,"We're applying YAGNI here","Support multiple DBs? - We're applying YAGNI here.","複数DB対応？- YAGNIを適用しています。","現在進行形で実践中。頭字語そのまま。","機能追加判断、設計簡素化、アジャイル開発","Don't build it yet","We adhere to the principle of deferred implementation","We apply YAGNI (進行形で実践強調)","実践的開発原則"
30,"Let's make this discoverable","Can't find advanced settings. - Let's make this discoverable.","詳細設定が見つからない。- 発見しやすくしましょう。","make + O + C構造。discoverableは形容詞。","UI/UX設計、API設計、ドキュメント構成","Make it easier to find","We should enhance feature discoverability","make this discover (形容詞形必要)","使いやすさ改善"